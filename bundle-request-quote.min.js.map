{
  "version": 3,
  "sources": ["../utils/formUtils.js", "../utils/close-page.js", "../pages/request-quote/index.js"],
  "sourcesContent": ["/**\n * Conditional Form Fields Script (Generic & Reusable)\n *\n * This script enables conditional visibility and required-state for form fields\n * based on trigger inputs (like dropdowns or radios).\n *\n * \u2705 How to use:\n * 1. Add `data-trigger=\"yourTriggerName\"` to the input controlling the logic (e.g. <select> or <input>).\n * 2. Add `data-condition-trigger=\"yourTriggerName\"` to any form field container that should be shown conditionally.\n * 3. Add `data-condition-value=\"triggerValue\"` to define when that field should be visible.\n * 4. Inside the conditional container, set form elements to `required` \u2014 the script toggles this automatically.\n *\n * This allows multiple trigger/condition pairs on the same page without extra JS.\n */\nexport function initConditionalFormFields() {\n  const triggers = document.querySelectorAll('[data-trigger]');\n\n  triggers.forEach((trigger) => {\n    trigger.addEventListener('change', () => updateConditionalFields(trigger));\n    updateConditionalFields(trigger); // Run on load\n  });\n\n  function updateConditionalFields(trigger) {\n    const triggerName = trigger.getAttribute('data-trigger');\n    const triggerValue = trigger.value;\n\n    const conditionals = document.querySelectorAll(`[data-condition-trigger=\"${triggerName}\"]`);\n\n    conditionals.forEach((field) => {\n      const shouldShow = field.getAttribute('data-condition-value') === triggerValue;\n      const input = field.matches('input, select, textarea') ? field : field.querySelector('input, select, textarea');\n\n      field.style.display = shouldShow ? 'block' : 'none';\n      if (input) {\n        input.required = shouldShow;\n        if (!shouldShow) input.value = '';\n      }\n    });\n  }\n}\n\n/** This script\n * - loops through all custom dropdowns with \"data-custom-dropdown\" attribute\n * - sets the selected value as selected in the dropdown\n * - creates a hidden input for form data\n * - sets the selected value from \"data-value\" to the hidden input\n **/\nexport function initCustomDropdowns() {\n  document.querySelectorAll('[data-custom-dropdown]').forEach((dropdown) => {\n    // Create the hidden input\n    const input = document.createElement('input');\n    input.type = 'hidden';\n    input.name = dropdown.dataset.name || 'custom-dropdown';\n    input.setAttribute('required', dropdown.dataset.required === 'true' || false);\n    input.value = ''; // Or set a default value if needed\n\n    // Append it to the dropdown or its closest form\n    dropdown.appendChild(input);\n\n    const toggle = dropdown.querySelector('.dropdown-selected-value');\n    const links = dropdown.querySelectorAll('.dropdown-item');\n\n    links.forEach((link) => {\n      link.addEventListener('click', (e) => {\n        e.preventDefault();\n        const value = link.dataset.value;\n        const content = link.cloneNode(true);\n        content.style.padding = 0; //reset paddings from dropdown-item\n\n        // Update visual\n        toggle.innerHTML = '';\n        toggle.appendChild(content);\n\n        // Set hidden field\n        input.value = value;\n      });\n    });\n  });\n}\n\n\n\n// Setting up daterange-pickers\n// Docs: https://mymth.github.io/vanillajs-datepicker/\nexport function initDateRangePickers(groupSelector, startDateSelector, minimumDays = 30) {\n  const datesInput = document.querySelector(groupSelector);\n  const startDateField = document.querySelector(startDateSelector);\n  const rangepicker = new DateRangePicker(datesInput, {\n    format: 'dd. MM yyyy',\n  });\n\n  // Add an event listener to validate the date range\n  let currentMinimumDays = minimumDays;\n\n  // Expose a method to update minimumDays dynamically\n  rangepicker.setMinimumDays = (days) => {\n    currentMinimumDays = days;\n  };\n\n  datesInput.addEventListener('changeDate', () => {\n    const [startDate, endDate] = rangepicker.getDates();\n\n    if (startDate && endDate) {\n      const differenceInDays = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24));\n      if (differenceInDays < currentMinimumDays) {\n        startDateField.setCustomValidity(`You need to choose a minimum of ${currentMinimumDays} days.`);\n        // Set end date to {{currentMinimumDays}} days after start date\n        rangepicker.setDates(startDate, new Date(startDate.getTime() + currentMinimumDays * 24 * 60 * 60 * 1000)); \n      } else {\n        startDateField.setCustomValidity('');\n      }\n    } else {\n      startDateField.setCustomValidity('');\n    }\n  \n    // Trigger form validation\n    startDateField.reportValidity();\n  });\n\n  return { rangepicker, datesInput, startDateField };\n}\n\n\n/**\n * This script is responsible for\n *  - the navigation of the multi step field\n *  - update of the wizard step indicators\n *  - form validation of all form elements of the current step\n **/\nexport function initFormWizardSteps() {\n  const steps = document.querySelectorAll('.form-step');\n  const stepIndicators = document.querySelectorAll(\n    '.form-wizard-step .form-wizard-step-progress'\n  );\n  let currentStep = 0;\n\n  function showStep(index) {\n    steps.forEach((step, i) => {\n      step.style.display = i === index ? 'block' : 'none';\n    });\n\n    stepIndicators.forEach((indicator, i) => {\n      if (i < index || i === index) {\n        indicator.classList.add('active');\n      } else {\n        indicator.classList.remove('active');\n      }\n    });\n  }\n\n  function validateCurrentStep() {\n    const currentInputs = steps[currentStep].querySelectorAll('input, select, textarea');\n    const errors = [];\n\n    currentInputs.forEach((input) => {\n      const isHidden = input.type === 'hidden' || input.offsetParent === null;\n\n      if (input.required) {\n        const isEmpty = !input.value || input.value.trim() === '';\n        if (isEmpty) {\n          const label = input.dataset.name || input.name || input.placeholder || 'Unnamed field';\n          errors.push(`${label} is required.`);\n        }\n      }\n\n      // Custom type validation (e.g., email)\n      if (!isHidden && input.value && !input.checkValidity()) {\n        const label = input.name || input.placeholder || 'Unnamed field';\n        errors.push(`${label} is invalid.`);\n      }\n    });\n    return errors;\n  }\n\n  function showErrors(containerId, errorMessages) {\n    const container = document.querySelector(containerId);\n\n    if (!container) return;\n\n    // Clear any previous errors\n    container.innerHTML = '';\n\n    // Create <ul> element\n    const ul = document.createElement('ul');\n\n    // Add each error as <li>\n    errorMessages.forEach((msg) => {\n      const li = document.createElement('li');\n      li.textContent = msg;\n      ul.appendChild(li);\n    });\n\n    // Append the list to the container\n    container.appendChild(ul);\n  }\n\n  function resetErrors(containerId) {\n    const container = document.querySelector(containerId);\n    if (container) {\n      container.innerHTML = '';\n    }\n  }\n\n  document.querySelectorAll('.form-next-step-btn').forEach((btn) => {\n    btn.addEventListener('click', () => {\n      if (btn.getAttribute('disabled') === 'true') {\n        return;\n      }\n\n      const errors = validateCurrentStep();\n      const errorListId = `#error-list-step-${currentStep}`;\n      resetErrors(errorListId);\n      if (errors.length == 0) {\n        currentStep = Math.min(currentStep + 1, steps.length - 1);\n        const isLastStep = currentStep === steps.length - 1;\n        if (isLastStep) {\n          prepareReviewFields(); // this loops through all fields with #review-* and sets the corresponding value\n        }\n        showStep(currentStep);\n      } else {\n        showErrors(errorListId, errors);\n      }\n    });\n  });\n\n  function prepareReviewFields() {\n    const reviewElements = document.querySelectorAll('[id^=\"review-\"]');\n\n    // Loop through the matched elements\n    reviewElements.forEach((element) => {\n      const fieldName = element.dataset.fieldname;\n      try {\n        const fieldValue = document.querySelector(`[name=\"${fieldName}\"]`).value;\n        element.innerText = fieldValue;\n      } catch {}\n    });\n  }\n\n  document.querySelectorAll('.form-previous-step-btn').forEach((btn) => {\n    btn.addEventListener('click', () => {\n      currentStep = Math.max(currentStep - 1, 0);\n      showStep(currentStep);\n    });\n  });\n\n  showStep(currentStep); // Init\n}", "\n/**\n * Initializes a X button on the page with ID \"close-button\":\n * When clicked it tries to receive the previous page\n * - If there was a previous page and that page was on the same domain -> navigate there\n * - If there was no previous page or previous page was not on same domain -> navigate home \"/\"\n */\nexport function initCloseButtonClick() {\n  document.getElementById(\"close-button\").addEventListener(\"click\", function () {\n    const referrer = document.referrer;\n    const currentDomain = window.location.hostname;\n\n    // Extract the domain from the referrer URL\n    let referrerDomain = null;\n    try {\n      referrerDomain = referrer ? new URL(referrer).hostname : null;\n    } catch (e) {\n      referrerDomain = null;\n    }\n\n    if (window.history.length > 1 && referrerDomain === currentDomain) {\n      window.history.back();\n    } else {\n      window.location.href = \"/\";\n    }\n  });\n}", "import { initConditionalFormFields, initFormWizardSteps, initCustomDropdowns, initDateRangePickers } from \"../../utils/formUtils\" \nimport { initCloseButtonClick } from \"../../utils/close-page\";\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  initCloseButtonClick();\n  initConditionalFormFields();\n  initFormWizardSteps();\n  initCustomDropdowns();\n  initDateRangePickers('#dates-start-end-group', '#Estimated-Start-Date');\n});"],
  "mappings": "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",
  "names": ["initConditionalFormFields", "trigger", "updateConditionalFields", "triggerName", "triggerValue", "field", "shouldShow", "input", "initCustomDropdowns", "dropdown", "toggle", "link", "e", "value", "content", "initDateRangePickers", "groupSelector", "startDateSelector", "minimumDays", "datesInput", "startDateField", "rangepicker", "currentMinimumDays", "days", "startDate", "endDate", "initFormWizardSteps", "steps", "stepIndicators", "currentStep", "showStep", "index", "step", "i", "indicator", "validateCurrentStep", "currentInputs", "errors", "isHidden", "label", "showErrors", "containerId", "errorMessages", "container", "ul", "msg", "li", "resetErrors", "btn", "errorListId", "prepareReviewFields", "element", "fieldName", "fieldValue", "init_formUtils", "__esmMin", "initCloseButtonClick", "referrer", "currentDomain", "referrerDomain", "init_close_page", "__esmMin", "require_request_quote", "__commonJSMin", "init_formUtils", "init_close_page", "initCloseButtonClick", "initConditionalFormFields", "initFormWizardSteps", "initCustomDropdowns", "initDateRangePickers"]
}
